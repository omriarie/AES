import argparse
import unittest
import os
# from daes import eaes, daes


s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

def eaes(message_path, key_path, output_path = ''):
    with open(message_path, 'rb') as message_file:
        message = message_file.read()
    with open(key_path, 'rb') as key_file:
        k = list(key_file.read())
    
    key_matrix = [k[i:i + 4] for i in range(0, len(k), 4)] # create 4x4 key matrix
    key =[key_matrix[0:4],key_matrix[4:]] # seperate round keys
    encrypted_message = bytearray()
    for i in range(0,len(message),16): # break message into 16 byte chunks
        state = list(message[i:i+16])
        for j in range(2): # 2 rounds of algorythm
            state = [s_box[b] for b in state] #sub bytes
            state = [state[k:k+4] for k in range(0, 16, 4)] # create 4x4 matrix

            state= [
                [state[0][0], state[0][1], state[0][2], state[0][3]],  # No shift
                [state[1][1], state[1][2], state[1][3], state[1][0]],  # Shift left by 1
                [state[2][2], state[2][3], state[2][0], state[2][1]],  # Shift left by 2
                [state[3][3], state[3][0], state[3][1], state[3][2]],  # Shift left by 3
            ]
           
            state = [[state[a][b] for a in range(4)] for b in range(4)] # rotate 90 degrees clockwise
            state = [row[::-1] for row in state]
            
            state = [
                [state[row][col] ^ key[j][row][col] for col in range(4)] #add round key
                for row in range(4)
            ]
            state = [byte for row in state for byte in row] # flatten the matrix
        encrypted_message.extend(state) # append block to encrypted message

    with open(output_path, 'wb') as output_file:
        output_file.write(encrypted_message)


def daes(message_path, key_path, output_path = ''):
    with open(message_path, 'rb') as message_file:
        message = message_file.read()
    with open(key_path, 'rb') as key_file:
        k = list(key_file.read())
    key_matrix = [k[i:i + 4] for i in range(0, len(k), 4)] # create 4x4 key matrix
    key =[key_matrix[4:],key_matrix[0:4]] # seperate round keys
    decrypted_message = bytearray()
    for i in range(0, len(message), 16): # break message into 16 byte chunks
        state = list(message[i:i+16]) # create list of 16 bytes
        
        for j in range(2):
            state = [state[k:k+4] for k in range(0, 16, 4)] # create 4x4 matrix
            
            state = [
                [state[row][col] ^ key[j][row][col] for col in range(4)] #rverse round key
                for row in range(4)
            ]
            
            state = [[state[a][b] for a in range(4)] for b in range(4)] # rotate 90 degrees counter clockwise
            state = state[::-1] 
            
            state = [
                [state[0][0], state[0][1], state[0][2], state[0][3]],  # No shift
                [state[1][3], state[1][0], state[1][1], state[1][2]],  # Shift right by 1
                [state[2][2], state[2][3], state[2][0], state[2][1]],  # No shift (rotate state)
                [state[3][1], state[3][2], state[3][3], state[3][0]],  # Shift right by 1
            ]
            state = [byte for row in state for byte in row]
            state = [inv_s_box[b] for b in state]  # inverse sub bytes
            
        decrypted_message.extend(state) # add block to decrypted message
    with open(output_path, 'wb') as output_file:
        output_file.write(decrypted_message)




class TestDAES(unittest.TestCase):

    def setUp(self):
        self.keys_short = "keys_short.txt"
        self.message_short = "message_short.txt"
        self.cipher_short = "cipher_short.txt"
        self.keys_long = "keys_long.txt"
        self.message_long = "message_long.txt"
        self.cipher_long = "cipher_long.txt"
        self.output_file = "test_output.txt"

    def tearDown(self):
        if os.path.exists(self.output_file):
            os.remove(self.output_file)

    def test_encrypt_short(self):
        eaes(self.message_short, self.keys_short, self.output_file)
        with open(self.output_file, 'rb') as f1, open(self.cipher_short, 'rb') as f2:
            self.assertEqual(f1.read(), f2.read())

    def test_decrypt_short(self):
        daes(self.cipher_short, self.keys_short, self.output_file)
        with open(self.output_file, 'rb') as f1, open(self.message_short, 'rb') as f2:
            self.assertEqual(f1.read(), f2.read())

    def test_encrypt_long(self):
        eaes(self.message_long, self.keys_long, self.output_file)
        with open(self.output_file, 'rb') as f1, open(self.cipher_long, 'rb') as f2:
            self.assertEqual(f1.read(), f2.read())

    def test_decrypt_long(self):
        daes(self.cipher_long, self.keys_long, self.output_file)
        with open(self.output_file, 'rb') as f1, open(self.message_long, 'rb') as f2:
            self.assertEqual(f1.read(), f2.read())

if __name__ == '__main__':
    unittest.main()








